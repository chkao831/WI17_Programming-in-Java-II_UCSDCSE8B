PSA 2: Word Clouds and Unit Testing
Read all instructions in this document before starting any coding! 
In this assignment, we introduce unit testing, which builds on the ideas of testing from PSA1. Your Java code will interact with files through I/O (Input/Output). Finally, you will use the pre-defined WordPair class to help you write a series of WordCloud methods working together to achieve a larger, overall program. Notice differences in amount of points assigned per part, especially for style and extra credit. Here is the Starter codes link.
Helpful Information: 

Online Communication: Using Piazza, Opening Regrade Requests
Getting Help from Tutor, TA, and Professor�s Hours
Lab and Office Hours (Always refer to this calendar before posting.)
Academic Integrity: What You Can and Can't Do in CSE 8B
Setting Up the PSA 
How to Use Vim 
Style Guidelines
Submitting on Vocareum and Grading Guidelines
Table of Contents:


Part 1: Vim and Unix Commands [7 Points]
Part 2: Unit Testing [First 5 Extra Credit Points]
Part 3: WordCloud Methods [70 Points]
A. Getting words from the input file (20 points)
B. Remove a given set of common words (10 points)
C. Print Words (5 points)
D. Find n most frequent words (30 points)
E. Finding the word count (5 points)
Appendix
Scanner
WordPair
WordCloudTester
ArrayLists
Testing Using WordCloudTester (Sample Output)
README.md [3 Points]
Style Guidelines [20 Points]
Extra Credit [+10 Points]
Testers [First 5 Extra Credit Points]
TopNPalindrome [Second 5 Extra Credit Points]
Submitting the Assignment?

Part 1: Vim and Unix Commands [7 Points]
In a file called README.md, answer the following questions with short answers.


Vim related Questions:
How do you switch from insert mode to command mode in vim?
What are two ways to enter insert mode from command mode in vim?
a. How do you quit a file in vim?
b. How do you quit a file in vim, without having to save the file first?
a. How do you save a file in vim?
b. How do you save and quit a file in vim using a single command?

Unix/Linux related Questions:
a. How do you change directories from the command line? 
b. How do you change to the home directory, no matter what directory you are currently in?
How do you make a directory from the command line?
How do you show the path to the directory you are currently in?

Part 2: Unit Testing and TDD [First 5 Extra Credit Points, Due before 11:50pm on Saturday 1/21/2017]
In PSA1, you learned to write testers for your code, whether it was inserting print statements, checking the print statements, testing various outputs for some input, or perhaps even using Exceptions. Regardless of technique, the important thing is to test your code and determine whether your code has the correct behavior. 

We now expand that idea with unit testing. Instead of writing one very large program and testing it, you might write several methods that have the same behavior as that one very large program. The direct effect is that smaller methods are also easier to test. Therefore, you might find it beneficial to write your own Helper Methods. Then you can test both the helper methods and the methods assigned. This is where unit testing becomes very useful. Unit testing is the act of writing tests for methods before you write your methods. Unit tests are a series of tests that run against its respective method. After writing the unit tests, the programmer then implements the methods. The unit tests can then be run in series. Each test will run, until a test fails or all tests passes. In industry, test driven development (TDD) is very common and is extremely valuable to learn in a setting such as this.  For example, suppose I have the following helper method.



/* This method returns the sum of first and second if and only if flag is true. Otherwise, return null 
Note: This method is not defined yet!
*/
public Integer addIfTrue (int first, int second, boolean flag);

For example, if you were testing a method addIfTrue(), create a test testAddIfTrue(). In the test, include a method call to the function you want to test, even though the function has not been implemented yet. Your tests should not focus on what�s inside of the method, but what output/result is expected given an input. As in this example, the programmer already knows what this method should do: It takes the two arguments (first and second), adds them together, and returns the sum. However, it will do so if and only if the third argument, flag, is true. Otherwise, just return null. Since the output�s expected value can be easily guessed, the programmer can write a tester method for it before writing the method itself. Notice that testAddIfTrue was fully implemented before addIfTrue was.

public boolean testAddIfTrue () {
    if ( addIfTrue ( 5  , 7 , true )   !=  12   ) return false; 
if ( addIfTrue ( 3  , 2 , true )   !=  5    ) return false; 
    if ( addIfTrue ( 0  , 0 , true )   !=  0    ) return false; 
    if ( addIfTrue ( -1 , 5 , false )  !=  null ) return false; 
    if ( addIfTrue ( 7  , 8 , false )  !=  null ) return false; 
    if ( addIfTrue ( 999, 1 , true )   !=  1000 ) return false; 
    if ( addIfTrue ( -6 ,-9 , false )  !=  null ) return false; 
return true; // Reaching this statement means all passed.
}
After addIfTrue() is implemented, the programmer will be able to run the unit tests on addIfTrue() and then modify its implementation from there.

An exercise: We included an exercise with the starter code to help you practice unit testing. Note that neither of these files will be submitted for points; this is only to practice unit testing, which is not only a concept, but also a technique. In ExampleClass.java, you will find instructions on how to go through the exercise. In UnitTestsEx.java, you will find example unit tests. You should only read Part 1 of ExampleClass at this point. The given method is derivative(), which takes an algebraic term, calculates its derivative, and then returns that expression as a String. Write unit tests inside UnitTestsEx.java to test derivative(). Then, move on down to Part 2 in ExampleClass.java. Don�t move on until you write at least one new unit test. 

Next, you will find a method called derivative2(), which is a partially implemented method of derivative. Comment out the first derivative(), and then rename derivative2() into derivative(). Now, you can run your unit tests. There is one provided for you, which will show you a wrong behavior of the partially implemented derivative() (the one you renamed). Fix this particular bug. Then rerun the unit test. If the actual result matches the correct result, then you have successfully used a unit test to help you with doing unit testing on your code. (Note that the partially implemented derivative2() was provided to save you a little bit of time. Typically, methods contain no implementation at start.) Feel free to continue writing more unit tests and fix derivative(). But whenever you are ready, you can move on.

For the extra credit: In this assignment, we have given you a set of methods in WordCloud.java you need to define. For this optional part, write your well-documented unit tests for the WordCloud methods in the provided file called WordCloudTester.java, which contains a provided tester for WordCloud. Your personal tests should focus on testing one method of a time with different arguments and test whether the result is as expected. Each test should test a different method. Once you have finished writing a method, call the unit tests in the main method of WorldCloudTester.java. For unit testing to be effective, you should test your code with your pre-written tests after each method is written. If your method fails the unit tests, you can use these failures to improve/debug your method�s functionality. Once you�ve made the correction, test the method again.

This extra credit promotes proper TDD by ensuring that you create the tests prior to the methods themselves. The unit tests will be worth 5 extra credit points, but there are two possible times you can submit the tests. There will be an optional early submission checkpoint. As an incentive to submit to the earlier submission, the grading on these unit tests will be more lenient. If the tests are submitted by the original deadline, then grading will be slightly more strict. The reason is, testers can be improved after you implement the methods.  However, we encourage you submit these testers as unit tests for the early checkpoint, because it is a much better practice to start testing design before you start writing code. Students should also submit this file at the original deadline to show improvements done to the testers.
Note: You are not required to submit a tester for the extra credit method topNPalindrome. (But you should test that method to ensure correctness for the other 5 extra credit points.)
Part 3: WordCloud Methods [70 Points] 
If for some reason you are not able finish all the methods, please leave the method empty with default return value depending on the return type, rather than just deleting that method. This ensures the file will compile even if the method is incorrect.

You are provided with the full code for WordPair.java and WordCloudTester.java.  You do not need to modify WordPair.  You will need to implement the following methods in WordCloud.java.  The intended use for this class is:
Read in the words from a file.
Strip out any common words (i.e., the, a, an) (the file with common words is given to you).
Display the most occurring words in the input file to another output file or on console.

Each of the methods below corresponds to one of the steps above. We have also provided some more detailed explanations on various components in the Appendix section. 

A. Getting words from the input file (20 points)
void getWordsFromFile( String filename ) throws IOException

This method constructs an ArrayList containing WordPairs for each word in the file. The throws IOException clause is there because you will deal with file I/O in this method. Your algorithm will be:

for every word in the file
    search for the word in the arrayList
        if the word is present
            increment its count
    if word is not already in the arrayList
        add word to the arrayList

Important:
Make sure that you do not ignore punctuations while saving your words in WordPair. For example,
�Apple� and �Apple!� should be counted as different words in the ArrayList (with different entries)
Similarly �state�, �state,� and �state.� should be counted as different words
(Although this may not be logically correct, it will make it much simpler for you to implement)

Note:
Adding a word into the ArrayList should be case insensitive and should just keep the String in the cloud the same as its first occurrence. 
All the input files should be put in the same location as the .java files. You should use relevant path while creating your File object.
Things to test: whether reading the file succeeded. Try writing your own small files. Make sure the WordCloud�s ArrayList contains the correct WordPairs read.
B. Remove a given set of common words (10 points)
void removeCommon(String omitFilename) throws IOException

This method will read each word from the specified file and remove that word from the ArrayList. Your method need not be efficient (nested for loops is fine). Also, removing a word is case insensitive like in the method before.

Things to Test: Make sure that the ArrayList has been properly filtered to now exclude common words. 

C. Print Words (5 points)
public void printWords(ArrayList<WordPair>wordList, boolean printToFile) throws IOException

This method is called to print the words in the WordPair Arraylist. This method takes in an ArrayList of WordPairs and a boolean printToFile. If printToFile is false, it should print the ArrayList of WordPair with their counts on the screen. If printToFile is true, it should output the ArrayList of WordPair with their counts to a file myOutput.out. The output file should be written into the current path, and not using an absolute path but a relevant path. By default, if you don�t provide any path when creating a file for output, Java will create the file in the folder where your java files are.

Also, you will be graded for formatting of the outputted text. If your formatting is wrong, up to 5 points will be deducted. Make sure that spaces and parentheses are consistent with what is provided in the sample output. Check the �Testing Using WordCloudTester (Sample Output)� section for more details.

Note: Print a newline after printing all the words in the console or the file.

Things to Test: make sure the correct action is chosen for the corresponding printToFile boolean. Then, make sure the content is correct. It is possible for the Tester method to open the file that was just written (through the printWords method call). Make sure to check for consistency between the wordList and the printed words. You may need to verify the print statements to terminal manually. 

D. Find n most frequent words (30 points)
public ArrayList<WordPair> topNWords(int n, int length)
This method will find the top n occurring words whose lengths are at least �length� (i.e the value of the integer �length� passed as the parameter) , as determined by their frequency in the arraylist and returns this list of words as well as their counts as an ArrayList.  In the event of a tie, use the first occurring word with that count

public ArrayList<WordPair> topNWords(int n, char beginsWith)
This method will find the top n occurring words which begin with the character �beginsWith� (i.e the value of the character beginsWith passed as the parameter) [Comparison should be case insensitive] , as determined by their frequency in the arraylist and returns this list of words as well as their counts as an ArrayList.  In the event of a tie, use the first occurring word with that count.

Hint:
Here is one way to get the top n words from an unsorted Arraylist (we refer to it as the original list here). You can iterate through the list looking for the word with the highest count. Once you have saved this word and its count into another ArrayList, you can make its count negative of its original in the original list so it won�t be the one with the highest rank again in the next round of search. You repeat this process until you have located the top n words. When you are done finding the top n words in the original list, you will need to iterate through the original array list again and change the negated counts back to their original values. For instance, if the original arraylist is the following (with word and its count) and the length parameter passed is 1.

dog 5
cat 222
snake 10
dophin 200

We want to locate the top 2 words in the list (n=2). In the first round of search, your code will locate cat which has the highest count, and make its count negative of its original count int the array list. It becomes
dog 5
cat -222
snake 10
dophin 200

In the second round of search, the list becomes the following. 
dog 5
cat -222
snake 10
dophin -200

The last step is to go through the original array list again to make all the counts positive again. So the array list changes back to its original form.

You are required to be able to have the method topNWords execute more than once and produce the same results (ArrayList should have the same values). In the case of a tie (two words are equally frequent), you should select the word which occurred first in the original text file.

Note 1: You are free to implement any other helper algorithm/method as well to get the topNwords. 

Note 2: Please note that topNWords method does not print/display anything.

Note 3: If the number of words that satisfy a criteria (i.e begin with given character or length >= given length) are lesser than n, return all those words. For example n = 10 but you have only 5 words that satisfy given criteria, return those 5 words.

Things to Test: Think about what needs to be tested to ensure correctness. Be aware this includes Note 1. 
E. Finding the word count (5 points)

int findWordCount(String word)

This method will take a string and search for it in the ArrayList. If the word is found, its count is returned. If the word isn�t found, then 0 is returned. Also, searching for a word is case insensitive like in the methods removeCommon and getWordsFromFile.

Things to Test: Think about what needs to be tested to ensure correctness. 


Appendix
Scanner
Use a Scanner object to read words from the file.
The Scanner Javadocs: http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html
The basic framework to use a Scanner in this PSA is:

// Construct a Scanner that reads in words from a file
Scanner input = new Scanner( new File(fileName));
while ( input.hasNext() )  // while there are more words to be read in
{
word = input.next();  // reads next string
    �
}
WordPair 
This class is just a pairing of a String (a word) with an integer (the number of its occurrences) for use in your WordCloud class.  Your ArrayList will store WordPair objects.  Applicable methods are provided.

WordCloudTester
This file contains some default testers for you to test the validity of the methods in your WordCloud.java file. It can simply be run by compiling along with the other files on the command line and running it. 

If you are intent on completing the unit testing extra credit portion of the PSA, consider using this file as a reference in thinking about how you can write unit tests for individual methods as you develop the PSA. 

ArrayLists
ArrayLists are dynamically resizing arrays. In Java, standard arrays are initialized to a fixed size when first created. However, with ArrayLists, there is an initial size but when it becomes full, it automatically enlarges. When an element is removed, it automatically gets smaller. 

Go to the Useful Links section on the course website for a link to Java API where you can find information about ArrayLists and the methods they have. Some suggested methods to use are : get, size, add, and remove. 

Testing Using WordCloudTester (Sample Output)
To use WordCloudTester, run a line like:

java WordCloudTester nameOfInputFile.txt numberOfTopNWords {file|console} {length|char} value
The following is an example of using the WordCloudTester on the provided file (harry_potter.txt), printing the top 10 words that start with the letter �s� on the console. Here the first argument is the name of the file. The second argument is numberOfTopNWords  (number of most frequent words to be printed). The third argument is console (printing it to the console). The fourth argument is char indicating that we will be finding top numberOfTopNWords which begin with a given char value. The last argument is the value of the char i.e �s�

General format of printing the words with their counts is : word(count)<space> 
You need not print every word on a separate line.

1. The example below shows the output on the console. Note your display might be different from the following based on the width of your console.

> java WordCloudTester harry_potter.txt 10 console char s
Reading in File: harry_potter.txt
Removing common words
Printing the top 10 words filtered by starting with character s on console
son(3) sister(3) sat(3) shooting(3) strange(2) small(2) sister,(2) son,(2) street(2) sign(2)


2. The example below shows the output printing to a file called myOutput.out
    > java WordCloudTester harry_potter.txt 10 file char s
          Reading in File: harry_potter.txt
Removing common words
Printing the top 10 words filtered by starting with character s in file a named myOutput.out

And a file called myOutput.out should be created with the following contents: 
son(3) sister(3) sat(3) shooting(3) strange(2) small(2) sister,(2) son,(2) street(2) sign(2)  

Note: If you comment out the method call to the provided tester method, you may simply use the terminal command java WordCloudTester in order to run your own testers. 

Part 4: README.md [3 Points]
In README.md, under your answers for Part 1, write about Part 2 and Part 3. What were the requirements? What did you learn? Provide a program description for each file you worked on. For example, WordCloud.java is a file you worked on, but not WordPair.java. However, you might mention WordPair when talking about WordCloud. Six answers total, unless you decided not to do Part 2, which becomes three answers total.

The audience of the README is anyone who knows no programming or computer science. As a rule of thumb, write as if you were writing for an impatient 5-year old boy or a non-computer scientist grandmother. This means use absolutely no ?Java or CSE terms but high-level terms are fine. 

Style Guidelines (Link) [20 Points]
Refer to the updated website with a more complete guideline and set of examples of what your style should look like. The requirements has changed since PSA1 so make sure to read it!  
Extra Credit [+10 Points (not 15)]
Unit Testing [First 5 Extra Credit Points]
In order to gain a fundamental understanding of unit testing, 5 extra credit points will be awarded for students who complete unit testing methods before developing PSA2. The details of unit testing is written in Part 2 of this assignment. To earn the extra credit, students are expected to test each of the methods they write in WordCloudTester.java. Students should still submit the WorldCloudTester.java file along with the rest of the required files. 
topNPalindrome [Second 5 Extra Credit Points]
public ArrayList<WordPair> topNPalindrome(int n, char endsWith)
In this part of extra credit, write a method called topNPalindrome in WordCloud.java. This method will find the top n occurring palindrome words which end with the character �endsWith� as determined by their frequency in the ArrayList and returns this list of words as well as their counts as an ArrayList. Two values are passed into the method: the first argument is the number of occurring palindrome to be found, second is the ending character (of type char) of the palindrome words. [Comparison should be case insensitive]  In the event of a tie, use the first occurring word with that count. 

Submitting the Assignment (Link)
Early Submission:
WordCloudTester.java

Submission Files (Make sure your submission contains all of the files and that they work on the ieng6 lab machines!)
WordCloudTester.java     (Optional, for early checkpoint and/or normal submission extra credit)
WordCloud.java         (With optional extra credit method defined in this file)
README.md             (Answers to unix/linux/vim questions; README descriptions)

Maximum Score Possible: 110/100 Points
